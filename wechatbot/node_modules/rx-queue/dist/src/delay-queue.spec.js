#!/usr/bin/env ts-node
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// tslint:disable:no-shadowed-variable
import test from 'blue-tape';
import sinon from 'sinon';
import DelayQueue from './delay-queue';
const EXPECTED_ITEM1 = { test: 'testing123' };
const EXPECTED_ITEM2 = { mol: 42 };
const EXPECTED_ITEM3 = 42;
const DELAY_PERIOD_TIME = 10; // milliseconds
test('DelayQueue 1 item', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const q = new DelayQueue(DELAY_PERIOD_TIME);
    const spy = sinon.spy();
    q.subscribe(spy);
    q.next(EXPECTED_ITEM1);
    t.equal(spy.callCount, 1, 'should called right after first item');
    t.deepEqual(spy.lastCall.args[0], EXPECTED_ITEM1, 'should get the first item immediately');
}));
test('DelayQueue 2 item', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const q = new DelayQueue(DELAY_PERIOD_TIME);
    const spy = sinon.spy();
    q.subscribe(spy);
    q.next(EXPECTED_ITEM1);
    q.next(EXPECTED_ITEM2);
    t.equal(spy.callCount, 1, 'should get one item after next two item');
    t.deepEqual(spy.lastCall.args[0], EXPECTED_ITEM1, 'should get the first item only');
    yield new Promise(resolve => setTimeout(resolve, DELAY_PERIOD_TIME + 3));
    t.equal(spy.callCount, 2, 'should get the second item after period delay');
    t.deepEqual(spy.lastCall.args[0], EXPECTED_ITEM2, 'should get the second item for last call');
}));
test('DelayQueue 3 items', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const q = new DelayQueue(DELAY_PERIOD_TIME);
    const spy = sinon.spy();
    q.subscribe(spy);
    q.next(EXPECTED_ITEM1);
    q.next(EXPECTED_ITEM2);
    q.next(EXPECTED_ITEM3);
    t.equal(spy.callCount, 1, 'get first item immediatelly');
    t.deepEqual(spy.lastCall.args[0], EXPECTED_ITEM1, 'should received EXPECTED_ITEM1 immediatelly');
    yield new Promise(resolve => setTimeout(resolve, DELAY_PERIOD_TIME + 3));
    t.equal(spy.callCount, 2, 'get second item after period');
    t.deepEqual(spy.lastCall.args[0], EXPECTED_ITEM2, 'should received EXPECTED_ITEM2 after 1 x period');
    yield new Promise(resolve => setTimeout(resolve, DELAY_PERIOD_TIME + 3));
    t.equal(spy.callCount, 3, 'should get the third item after 2 x period');
    t.deepEqual(spy.lastCall.args[0], EXPECTED_ITEM3, 'should received EXPECTED_ITEM3 after 2 x period');
}));
//# sourceMappingURL=delay-queue.spec.js.map