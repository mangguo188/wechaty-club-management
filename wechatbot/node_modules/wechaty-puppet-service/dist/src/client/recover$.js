"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.recover$ = exports.heartbeatReset$ = exports.heartbeatDing$ = exports.switchOnHeartbeat$ = exports.heartbeat$ = exports.switchOff$ = exports.switchOn$ = exports.dingHeartbeat = exports.resetPuppet = exports.switchSuccess = void 0;
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const config_1 = require("../config");
/**
 * Filters
 */
const switchSuccess = (status) => status === true;
exports.switchSuccess = switchSuccess;
/**
 * Actions
 */
const resetPuppet = (puppet) => (n) => puppet.emit('reset', { data: `recover$() AED #${n}` });
exports.resetPuppet = resetPuppet;
const dingHeartbeat = (puppet) => (n) => puppet.ding(`recover$() CPR #${n}`);
exports.dingHeartbeat = dingHeartbeat;
/**
 * Observables
 */
// Huan(202105) FIXME: use automatically inference instead of hard coding typing here
const switchOn$ = (puppet) => rxjs_1.fromEvent(puppet.state, 'on');
exports.switchOn$ = switchOn$;
const switchOff$ = (puppet) => rxjs_1.fromEvent(puppet.state, 'off');
exports.switchOff$ = switchOff$;
const heartbeat$ = (puppet) => rxjs_1.fromEvent(puppet, 'heartbeat');
exports.heartbeat$ = heartbeat$;
/**
 * Streams
 */
// Heartbeat stream is like ECG (ElectroCardioGraphy)
const switchOnHeartbeat$ = (puppet) => exports.switchOn$(puppet).pipe(operators_1.filter(exports.switchSuccess), operators_1.tap(_ => config_1.log.verbose('PuppetService', 'recover$() switchOn$ fired')), operators_1.switchMap(_ => exports.heartbeat$(puppet).pipe(operators_1.startWith(undefined), // initial beat
operators_1.tap(payload => config_1.log.verbose('PuppetService', 'recover$() heartbeat: %s', JSON.stringify(payload))))));
exports.switchOnHeartbeat$ = switchOnHeartbeat$;
/**
 * The GRPC keepalive timeout is 20 seconds
 * So we use 15 seconds to save the GRPC keepalive cost
 *
 *  https://github.com/grpc/grpc/blob/master/doc/keepalive.md
 *    GRPC_ARG_KEEPALIVE_TIMEOUT_MS 20000 (20 seconds)  20000 (20 seconds)
 */
const PUPPET_SERVICE_KEEPALIVE_TIMEOUT = 15 * 1000;
let HEARTBEAT_COUNTER = 0;
// Ding is like CPR (Cardio Pulmonary Resuscitation)
const heartbeatDing$ = (puppet) => exports.switchOnHeartbeat$(puppet).pipe(operators_1.debounce(() => rxjs_1.interval(PUPPET_SERVICE_KEEPALIVE_TIMEOUT)), operators_1.tap(_ => config_1.log.verbose('PuppetService', 'recover$() heartbeatDing()')), operators_1.mapTo(HEARTBEAT_COUNTER++), operators_1.tap(exports.dingHeartbeat(puppet)));
exports.heartbeatDing$ = heartbeatDing$;
const PUPPET_SERVICE_RESET_TIMEOUT = 60 * 1000;
// Reset is like AED (Automated External Defibrillator)
const heartbeatReset$ = (puppet) => exports.switchOnHeartbeat$(puppet).pipe(operators_1.debounce(_ => rxjs_1.interval(PUPPET_SERVICE_RESET_TIMEOUT)), operators_1.tap(_ => config_1.log.verbose('PuppetService', 'recover$() heartbeatReset()')), operators_1.switchMap(_ => rxjs_1.interval(PUPPET_SERVICE_RESET_TIMEOUT).pipe(
// map(n => `AED#${n}`),
operators_1.tap(exports.resetPuppet(puppet)), operators_1.takeUntil(exports.heartbeat$(puppet)))));
exports.heartbeatReset$ = heartbeatReset$;
/**
 * Main stream
 */
const recover$ = (puppet) => rxjs_1.merge(exports.heartbeatDing$(puppet), exports.heartbeatReset$(puppet));
exports.recover$ = recover$;
//# sourceMappingURL=recover$.js.map