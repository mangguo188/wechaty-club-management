"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testDing = void 0;
const fs_1 = __importDefault(require("fs"));
const mod_1 = require("../../src/mod");
const promisify_1 = require("../promisify");
async function testDing(client) {
    const ding = promisify_1.promisify(client.ding.bind(client));
    const dingRequest = new mod_1.DingRequest();
    dingRequest.setData('dingdong');
    try {
        // const metadata = new Metadata()
        // metadata.set('grpc.default_authority', 'puppet_token')
        await ding(dingRequest /* metadata */);
    }
    catch (e) {
        console.error(e);
    }
}
exports.testDing = testDing;
async function main() {
    const TOKEN = '__token__';
    const metadata = new mod_1.grpc.Metadata();
    metadata.add('authorization', `Bearer ${TOKEN}`);
    const headerCreds = mod_1.grpc.credentials.createFromMetadataGenerator((_, callback) => callback(null, metadata));
    const certChain = fs_1.default.readFileSync('client.crt');
    const privateKey = fs_1.default.readFileSync('client.key');
    const rootCerts = fs_1.default.readFileSync('ca.crt');
    void fs_1.default;
    const creds = mod_1.grpc.credentials.combineChannelCredentials(
    // grpc.credentials.createInsecure(),
    mod_1.grpc.credentials.createSsl(rootCerts, privateKey, certChain), headerCreds);
    // const creds = grpc.credentials.createInsecure()
    const client = new mod_1.PuppetClient('localhost:8788', creds, {
        'grpc.default_authority': 'puppet_token',
    });
    await testDing(client);
    return 0;
}
main()
    .catch(e => {
    console.error(e);
    process.exit(1);
});
//# sourceMappingURL=client.js.map