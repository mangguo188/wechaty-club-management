"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageObs = void 0;
const config_1 = require("../config");
const backend_1 = require("./backend");
// tslint:disable-next-line:no-var-requires
const ObsClient = require('esdk-obs-nodejs');
class StorageObs extends backend_1.StorageBackend {
    constructor(name, options) {
        config_1.log.verbose('StorageObs', 'constructor()');
        options.type = 'obs';
        super(name, options);
        options = options;
        this.obs = new ObsClient({
            access_key_id: options.accessKeyId,
            secret_access_key: options.secretAccessKey,
            server: options.server,
        });
    }
    toString() {
        const text = [
            this.constructor.name,
            '<',
            this.name,
            '>',
        ].join('');
        return text;
    }
    save(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('StorageObs', 'save()');
            const options = this.options;
            yield this.putObject({
                Body: JSON.stringify(payload),
                Bucket: options.bucket,
                Key: this.name,
            });
        });
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('StorageObs', 'load()');
            try {
                const result = yield this.getObject();
                if (!result) {
                    return {};
                }
                config_1.log.info('presss', result);
                return result;
            }
            catch (e) {
                config_1.log.warn('StorageObs', 'load() exception: %s', e);
                return {};
            }
        });
    }
    destroy() {
        return __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('StorageObs', 'destroy()');
            yield this.deleteObject();
        });
    }
    putObject(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = this.options;
            return new Promise((resolve, reject) => {
                this.obs.putObject({
                    Body: JSON.stringify(payload),
                    Bucket: options.bucket,
                    Key: this.name,
                }, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        config_1.log.verbose('obs putObject result', JSON.stringify(result));
                        if (result.CommonMsg.Status === 200) {
                            resolve();
                        }
                        else {
                            reject(new Error('obs putObject error'));
                        }
                    }
                });
            });
        });
    }
    getObject() {
        return __awaiter(this, void 0, void 0, function* () {
            const options = this.options;
            return new Promise((resolve, reject) => {
                this.obs.getObject({
                    Bucket: options.bucket,
                    Key: this.name,
                }, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        config_1.log.verbose('obs getObject result', JSON.stringify(result.CommonMsg));
                        if (result.CommonMsg.Status < 300 && result.InterfaceResult) {
                            const buffer = result.InterfaceResult.Content;
                            const str = buffer.toString();
                            const obj = JSON.parse(str);
                            resolve((JSON.parse(obj.Body)));
                        }
                        else {
                            reject(new Error('obs getObject error'));
                        }
                    }
                });
            });
        });
    }
    deleteObject() {
        return __awaiter(this, void 0, void 0, function* () {
            const options = this.options;
            return new Promise((resolve, reject) => {
                this.obs.putObject({
                    Bucket: options.bucket,
                    Key: this.name,
                }, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        config_1.log.verbose('obs putObject result', JSON.stringify(result));
                        if (result.CommonMsg.Status < 300) {
                            resolve();
                        }
                        else {
                            reject(new Error('obs deleteObject error'));
                        }
                    }
                });
            });
        });
    }
}
exports.StorageObs = StorageObs;
//# sourceMappingURL=obs.js.map