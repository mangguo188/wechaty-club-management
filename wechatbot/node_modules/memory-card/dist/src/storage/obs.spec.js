#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const blue_tape_1 = __importDefault(require("blue-tape"));
const obs_1 = require("./obs");
const fixtures_1 = require("../../tests/fixtures");
blue_tape_1.default.skip('huawei obs storage smoke testing', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const EXPECTED_PAYLOAD = { mol: 42 };
    const NAME = Math.random().toString().substr(2);
    const s3 = new obs_1.StorageObs(NAME, {
        accessKeyId: fixtures_1.OBS_SETTING.ACCESS_KEY_ID,
        bucket: fixtures_1.OBS_SETTING.BUCKET,
        secretAccessKey: fixtures_1.OBS_SETTING.SECRET_ACCESS_KEY,
        server: fixtures_1.OBS_SETTING.SERVER,
    });
    let empty = yield s3.load();
    t.deepEqual(empty, {}, 'should get back a empty object for non-exist data');
    yield s3.save(EXPECTED_PAYLOAD);
    const payload = yield s3.load();
    t.deepEqual(payload, EXPECTED_PAYLOAD, 'should get back data from obs');
    yield s3.destroy();
    empty = yield s3.load();
    t.deepEqual(empty, {}, 'should get back a empty object after destroy()');
}));
//# sourceMappingURL=obs.spec.js.map